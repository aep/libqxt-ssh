LibQxt Coding Style Guidelines

1. Files
   1.1. Every header and source file begins with a header comment
   1.2. Comments must be written in C++-format (// ...). Multiline comments may be written in syntax of C (/* ... */).
   1.3. Header files
        1.3.1. The file name extension of a header file is .h
        1.3.2. A single public header file contains one public interface (class or namespace).
        1.3.3. Header files contain only declarations. Implementation belongs to source files.
               - Exception: inline and template functions must be placed within header files because of compiler limitations.
        1.3.4. Header files include only necessary header files.
               - Unnecessary include directives produce unnecessary dependencies between compile units.
        1.3.5. Use forward declarations whenever possible.
               - A forward declaration is enough when a type is referred only as reference or pointer.
        1.3.6. Header files do not contain using-clauses.
               - Using explicit namespace prefixes in header files lowers the risk of name conflicts.
        1.3.7. Header files must be protected against multiple inclusion
               - Multiple inclusion of header files causes a compile error.
                 #ifndef CLASSNAME_H
                 #define CLASSNAME_H
                     ...
                 #endif // CLASSNAME_H
        1.3.8. Include directives do not contain references to certain directories.
               - Using directory hierachies in include directives binds files strictly to certain environment and complicates portability.
                 #include "../../module/header.h" // WRONG
   1.4. Source files
        1.4.1. The file name extension of a source file is .cpp
        1.4.2. Source files include only necessary header files.
               - Unnecessary include directives produce unnecessary dependencies between compile units.
        1.4.3. Source files include first local headers, and then external library headers.
               - This order assures that header files do not depend on external library headers and leads to easier portability.
        1.4.4. Implementation of an interface is in the same order than in the header file.
               - This makes it easier to find the corresponding implementation.

2. Names
   2.1. Comments and symbolic names are in English.
   2.2. Symbolic names must not start with an underscore or contain two consecutive underscores.
        - ISO C++-standard reserves such names for compilers.
   2.3. Names of classes, structs, namespaces and typedefs start with an uppercase letter.
          class Name;
   2.4. Names of variables, functions and member functions start with a lowercase letter.
        - Exception: constructors and destructors must be named after corresponding class
          Type variable;
          void doSomething();
   2.5. Constants are written in uppercase letters.
          static const unsigned int BUFFER_LIMIT = 1024;

3. Variables and constants

4. Layout and style

5. Mixing C and C++

6. Type conversions

7. Functions and member functions

8. Classes and objects

9. Scope
   9.1. Memory management
   9.2. Constructing and destructing objects
   9.3. Copying objects
   9.4. Assigning objects

10. Inheritance

11. Templates

12. Exceptions

References:
- http://www.cs.tut.fi/~oliot/kirja/tyyliopas/
- http://doc.trolltech.com/qq/qq13-apis.html
