#!/bin/bash

#==some defaults==
QMAKE_BIN=qmake
WHICH=which

TESTDIR=config.tests


# the name of this script
relconf=`basename $0`
# the directory of this script (the root)
relpath=`dirname $0`
relpath=`(cd "$relpath"; /bin/pwd)`
# the current directory is the "build tree" or "object tree"
PROJECT_ROOT=`/bin/pwd`





#==parse configure options==

echo "QXT_stability += unknown" > config.in

while (( $# > 0 )); do
    if [ $1 == "-qmake-bin" ]; then
        QMAKE_BIN=$2; shift
    elif [ $1 == "-bootstrap" ]; then
        echo "CONFIG += bootstrap" >> config.in; shift
    elif [ $1 == "-nomake" ]; then
        echo "QXT_BUILD -= $2" >> config.in; shift
    elif [ $1 == "-prefix" ]; then
        echo "QXTINSTALLDIR = $2" >> config.in; shift
    elif [ $1 == "-libdir" ]; then
        echo "target.path = $2" >> config.in; shift
    elif [ $1 == "-docdir" ]; then
        echo "docs.path = $2" >> config.in; shift
    elif [ $1 == "-headerdir" ]; then
        echo "include.path = $2" >> config.in; shift
    elif [ $1 == "-bindir" ]; then
        echo "bin.path = $2" >> config.in; shift
    elif [ $1 == "-ignore-stability" ]; then
        echo "QXT_ignore_stability += $2" >> config.in; shift
    elif [ $1 == "-static" ]; then
        echo "CONFIG += static staticlib" >> config.in
    elif [ $1 == "-debug" ]; then
        echo "CONFIG += debug" >> config.in
    elif [ $1 == "-release" ]; then
        echo "CONFIG += release" >> config.in
    elif [ $1 == "-no-stability-unknown" ]; then
        echo "QXT_stability -= unknown" >> config.in
    elif [ $1 == "-no-openssl" ]; then
        echo "QXT_LIBS -= openssl" >> config.in
    elif [ $1 == "-help" ] || [ $1 == "--help" ]; then
        echo "Usage: configure [-prefix <dir>] [-libdir <dir>] [-docdir <dir>]"
        echo "       [-bindir <dir>] [-headerdir <dir>] [-qmake-bin <path>]"
        echo "       [-static] [-debug] [-release] [-no-stability-unknown]"
        echo "       [-no-openssl] [-nomake <module>]"
        echo
        echo "Installation options:"
        echo
        echo "-prefix <dir> ....... This will install everything relative to <dir>"
        if uname -a | grep -i Darwin; then
            echo "                      default: /Library/Frameworks/"
        else
            echo "                      default: /usr/"
        fi
        echo "-libdir <dir> ....... Libraries will be installed to <dir>"
        echo "                      default: PREFIX/lib"
        echo "-docdir <dir> ....... Documentation will be installed to <dir>"
        echo "                      default: PREFIX/share/doc"
        echo "-bindir <dir> ....... Executables will be installed to <dir>"
        echo "                      default: PREFIX/bin"
        echo "-headerdir <dir> .... Include files will be installed to <dir>"
        echo "                      default: PREFIX/include"
        echo "-qmake-bin <path> ... Specifies the path to the qmake executable"
        echo "                      default: search the system path"
        echo "-static ............. Compile Qxt as a static library"
        echo "-debug .............. Build Qxt with debugging symbols"
        echo "-release ............ Build Qxt without debugging support"
        echo "-no-stability-unknown Do not build untested classes"
        echo "-no-openssl ......... Do not link to OpenSSL"
        echo "-nomake <module> .... Do not compile the specified module"
        echo "                      options: kit network gui sql media curses web"
        echo "-bootstrap .......... That should not be needed for release versions."
        echo "                      warning: will only work on bash > 3.2"

        rm config.in
        exit
    else
        echo "Unrecognized configure option: $1"
        rm config.in
        exit
    fi
    shift
done



#==begin some autodetection==



# qmake?
if ! $WHICH $QMAKE_BIN >/dev/null 2>&1; then
	echo >&2 "You don't seem to have 'qmake' in your PATH."
        echo >&2 "Cannot proceed."
        exit 1
fi


# find a make command
if [ -z "$MAKE" ]; then
    MAKE=
    for mk in gmake make; do
        if "$WHICH" $mk >/dev/null 2>&1; then
            MAKE=`$WHICH $mk`
            break
        fi
    done
    if [ -z "$MAKE" ]; then
        echo >&2 "You don't seem to have 'make' or 'gmake' in your PATH."
        echo >&2 "Cannot proceed."
        exit 1
    fi
fi





#openssl



if ! which $QMAKE_BIN >/dev/null 2>&1; then
	echo >&2 "You don't seem to have 'qmake' in your PATH."
        echo >&2 "Cannot proceed."
        exit 1
fi




cd $PROJECT_ROOT/$TESTDIR
cd openssl
$QMAKE_BIN  >/dev/null 2>&1
$MAKE >/dev/null 2>&1

if ! ./openssl >/dev/null 2>&1; then
	echo >&2 "test for openssl failed"
else
	echo "DEFINES+=HAVE_OPENSSL">>$PROJECT_ROOT/config.in
fi


 



echo "autodetection finished. running qmake."
cd  $PROJECT_ROOT

[ -f config.pri ] && mv config.pri config.pri.bak
mv config.in config.pri

$QMAKE_BIN -recursive
